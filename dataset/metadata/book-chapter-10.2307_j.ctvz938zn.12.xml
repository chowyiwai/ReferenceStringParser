

<book xmlns:mml="http://www.w3.org/1998/Math/MathML"
      xmlns:oasis="http://docs.oasis-open.org/ns/oasis-exchange/table"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      dtd-version="0.2"
      xml:lang="eng">
   <collection-meta>
      <collection-id collection-id-type="jstor">j.ctt4zdkh</collection-id>
   </collection-meta>
   <book-meta>
      <book-id book-id-type="doi">10.2307/j.ctvz938zn</book-id>
      <subj-group>
         <subject content-type="call-number">QA76M21453 2012</subject>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Computer science</subject>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Computer algorithms</subject>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Artificial intelligence</subject>
      </subj-group>
      <subj-group subj-group-type="discipline">
         <subject>Computer Science</subject>
         <subject>Technology</subject>
      </subj-group>
      <book-title-group>
         <book-title>Nine Algorithms That Changed the Future</book-title>
         <subtitle>The Ingenious Ideas That Drive Today's Computers</subtitle>
      </book-title-group>
      <contrib-group>
         <contrib contrib-type="author" id="contrib1">
            <name name-style="western">
               <surname>MacCormick</surname>
               <given-names>John</given-names>
            </name>
         </contrib>
      </contrib-group>
      <pub-date>
         <day>15</day>
         <month>09</month>
         <year>2020</year>
      </pub-date>
      <isbn content-type="ppub">9780691209067</isbn>
      <isbn content-type="epub">9780691209050</isbn>
      <isbn content-type="epub">0691209057</isbn>
      <publisher>
         <publisher-name>Princeton University Press</publisher-name>
         <publisher-loc>PRINCETON; OXFORD</publisher-loc>
      </publisher>
      <edition>NED - New edition</edition>
      <permissions>
         <copyright-year>2012</copyright-year>
         <copyright-holder>Princeton University Press</copyright-holder>
      </permissions>
      <self-uri xlink:href="https://www.jstor.org/stable/j.ctvz938zn"/>
      <abstract abstract-type="short">
         <p>
&lt;p&gt;&lt;strong&gt;Nine revolutionary algorithms that power our computers
and smartphones&lt;/strong&gt; Every day, we use our computers to perform
remarkable feats. A simple web search picks out a handful of
relevant needles from the world's biggest haystack. Uploading a
photo to Facebook transmits millions of pieces of information over
numerous error-prone network links, yet somehow a perfect copy of
the photo arrives intact. Without even knowing it, we use
public-key cryptography to transmit secret information like credit
card numbers, and we use digital signatures to verify the identity
of the websites we visit. How do our computers perform these tasks
with such ease? John MacCormick answers this question in language
anyone can understand, using vivid examples to explain the
fundamental tricks behind nine computer algorithms that power our
PCs, tablets, and smartphones.&lt;/p&gt;
</p>
      </abstract>
      <custom-meta-group>
         <custom-meta>
            <meta-name>
                    lang
                </meta-name>
            <meta-value>eng</meta-value>
         </custom-meta>
      </custom-meta-group>
   </book-meta>
   <body>
      <book-part book-part-type="book-toc-page-order" indexed="yes">
         <body>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.1</book-part-id>
                  <title-group>
                     <title>Front Matter</title>
                  </title-group>
                  <fpage>i</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.2</book-part-id>
                  <title-group>
                     <title>Table of Contents</title>
                  </title-group>
                  <fpage>vii</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.3</book-part-id>
                  <title-group>
                     <title>FOREWORD</title>
                  </title-group>
                  <contrib-group>
                     <contrib contrib-type="author" id="contrib1" xlink:type="simple">
                        <name name-style="western">
                           <surname>Bishop</surname>
                           <given-names>Chris</given-names>
                        </name>
                     </contrib>
                  </contrib-group>
                  <fpage>ix</fpage>
                  <abstract>
                     <p>Computing is transforming our society in ways that are as profound as the changes wrought by physics and chemistry in the previous two centuries. Indeed, there is hardly an aspect of our lives that hasn’t already been influenced, or even revolutionized, by digital technology. Given the importance of computing to modern society, it is therefore somewhat paradoxical that there is so little awareness of the fundamental concepts that make it all possible. The study of these concepts lies at the heart of computer science, and this new book by MacCormick is one of the relatively few to present them to</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.4</book-part-id>
                  <title-group>
                     <label>1</label>
                     <title>Introduction:</title>
                     <subtitle>What Are the Extraordinary Ideas Computers Use Every Day?</subtitle>
                  </title-group>
                  <fpage>1</fpage>
                  <abstract>
                     <p>How were the great ideas of computer science born? Here’s a selection:</p>
                     <p>In the 1930s, before the first digital computer has even been built, a British genius founds the field of computer science, then goes on to prove that certain problems cannot be solved by any computer to be built in the future, no matter how fast, powerful, or cleverly designed.</p>
                     <p>In 1948, a scientist working at a telephone company publishes a paper that founds the field of information theory. His work will allow computers to transmit a message with perfect accuracy even when most of the data is corrupted</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.5</book-part-id>
                  <title-group>
                     <label>2</label>
                     <title>Search Engine Indexing:</title>
                     <subtitle>Finding Needles in the World’s Biggest Haystack</subtitle>
                  </title-group>
                  <fpage>10</fpage>
                  <abstract>
                     <p>Search engines have a profound effect on our lives. Most of us issue search queries many times a day, yet we rarely stop to wonder just how this remarkable tool can possibly work. The vast amount of information available and the speed and quality of the results have come to seem so normal that we actually get frustrated if a question can’t be answered within a few seconds. We tend to forget that every successful web search extracts a needle from the world’s largest haystack: the World Wide Web.</p>
                     <p>In fact, the superb service provided by search engines is not</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.6</book-part-id>
                  <title-group>
                     <label>3</label>
                     <title>PageRank:</title>
                     <subtitle>The Technology That Launched Google</subtitle>
                  </title-group>
                  <fpage>24</fpage>
                  <abstract>
                     <p>Architecturally speaking, the garage is typically a humble entity. But in Silicon Valley, garages have a special entrepreneurial significance: many of the great Silicon Valley technology companies were born, or at least incubated, in a garage. This is not a trend that began in the dot-com boom of the 1990s. Over 50 years earlier—in 1939, with the world economy still reeling from the Great Depression—Hewlett-Packard got underway in Dave Hewlett’s garage in Palo Alto, California. Several decades after that, in 1976, Steve Jobs and Steve Wozniak operated out of Jobs’ garage in Los Altos, California, after founding their</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.7</book-part-id>
                  <title-group>
                     <label>4</label>
                     <title>Public Key Cryptography:</title>
                     <subtitle>Sending Secrets on a Postcard</subtitle>
                  </title-group>
                  <fpage>38</fpage>
                  <abstract>
                     <p>Humans love to gossip, and they love secrets. And since the goal of cryptography is to communicate secrets, we are all natural cryptographers. But humans can communicate secretly more easily than computers. If you want to tell a secret to your friend, you can just whisper in your friend’s ear. It’s not so easy for computers to do that. There’s no way for one computer to “whisper” a credit card number to another computer. If the computers are connected by the internet, they have no control over where that credit card number goes, and which other computers get to find</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.8</book-part-id>
                  <title-group>
                     <label>5</label>
                     <title>Error-Correcting Codes:</title>
                     <subtitle>Mistakes That Fix Themselves</subtitle>
                  </title-group>
                  <fpage>60</fpage>
                  <abstract>
                     <p>These days, we’re used to accessing computers whenever we need them. Richard Hamming, a researcher working at the Bell Telephone Company labs in the 1940s, was not so lucky: the company computer he needed was used by other departments and available to him only on weekends. You can imagine his frustration, therefore, at the crashes that kept recurring due to the computer’s errors in reading its own data. Here is what Hamming himself had to say on the matter:</p>
                     <p>Two weekends in a row I came in and found that all my stuff had been dumped and nothing was done.</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.9</book-part-id>
                  <title-group>
                     <label>6</label>
                     <title>Pattern Recognition:</title>
                     <subtitle>Learning from Experience</subtitle>
                  </title-group>
                  <fpage>80</fpage>
                  <abstract>
                     <p>In each previous chapter, we’ve looked at an area in which the ability of computers far outstrips the ability of humans. For example, a computer can typically encrypt or decrypt a large file within a second or two, whereas it would take a human many years to perform the same computations by hand. For an even more extreme example, imagine how long it would take a human to manually compute the PageRank of billions of web pages according to the algorithm described in chapter 3. This task is so vast that, in practice, it is impossible for a human. Yet</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.10</book-part-id>
                  <title-group>
                     <label>7</label>
                     <title>Data Compression:</title>
                     <subtitle>Something for Nothing</subtitle>
                  </title-group>
                  <fpage>105</fpage>
                  <abstract>
                     <p>We’re all familiar with the idea of <italic>compressing</italic> physical objects: when you try to fit a lot of clothes into a small suitcase, you can squash the clothes so that they are small enough to fit even though they would overflow the suitcase at their normal size. You have <italic>compressed</italic> the clothes. Later, you can <italic>decompress</italic> the clothes after they come out of a suitcase and (hopefully) wear them again in their original size and shape.</p>
                     <p>Remarkably, it’s possible to do exactly the same thing with information: computer files and other kinds of data can often be compressed to a</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.11</book-part-id>
                  <title-group>
                     <label>8</label>
                     <title>Databases:</title>
                     <subtitle>The Quest for Consistency</subtitle>
                  </title-group>
                  <fpage>122</fpage>
                  <abstract>
                     <p>Consider the following arcane ritual. A person takes from a desk a specially printed pad of paper (known as a <italic>checkbook</italic>), writes some numbers on it, and adds a signature with a flourish. The person then tears the top sheet from the pad, puts it in an envelope, and sticks another piece of paper (known as a <italic>stamp</italic>) on the front of the envelope. Finally, the person carries the envelope outside and down the street, to a large box where the envelope is deposited.</p>
                     <p>Until the turn of the 21st century, this was the monthly ritual of anyone paying a</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.12</book-part-id>
                  <title-group>
                     <label>9</label>
                     <title>Digital Signatures:</title>
                     <subtitle>Who <italic>Really</italic> Wrote This Software?</subtitle>
                  </title-group>
                  <fpage>149</fpage>
                  <abstract>
                     <p>Of all the ideas we’ll encounter in this book, the concept of a “digital signature” is perhaps the most paradoxical. The word “digital,” interpreted literally, means “consisting of a string of digits.” So, by definition, anything that is digital can be copied: to do so, just copy the digits one at a time. If you can read it, you can copy it! On the other hand, the whole point of a “signature” is that it can be read, but can’t be copied (that is, forged) by anyone other than its author. How could it be possible to create a signature</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.13</book-part-id>
                  <title-group>
                     <label>10</label>
                     <title>What Is Computable?</title>
                  </title-group>
                  <fpage>174</fpage>
                  <abstract>
                     <p>We’ve now seen quite a number of clever, powerful, and beautiful algorithms—algorithms that turn the bare metal of a computer into a genius at your fingertips. In fact, it would be natural to wonder, based on the rhapsodic rhetoric in the preceding chapters, if there is <italic>anything</italic> that computers cannot do for us. The answer is absolutely clear if we limit ourselves to what computers can do <italic>today</italic>: there are plenty of useful tasks (mostly involving some form of artificial intelligence) that computers can’t, at present, perform well. Examples include high-quality translation between languages like English and Chinese; automatically</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.14</book-part-id>
                  <title-group>
                     <label>11</label>
                     <title>Conclusion:</title>
                     <subtitle>More Genius at Your Fingertips?</subtitle>
                  </title-group>
                  <fpage>199</fpage>
                  <abstract>
                     <p>I was fortunate, in 1991, to attend a public lecture by the great theoretical physicist Stephen Hawking. During the lecture, which was boldly titled “The Future of the Universe,” Hawking confidently predicted that the universe would keep expanding for at least the next 10 billion years. He wryly added, “I don’t expect to be around to be proved wrong.” Unfortunately for me, predictions about computer science do not come with the same 10-billion-year insurance policy that is available to cosmologists. Any predictions I make may well be disproved during my own lifetime.</p>
                     <p>But that shouldn’t stop us thinking about the</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.15</book-part-id>
                  <title-group>
                     <title>ACKNOWLEDGMENTS</title>
                  </title-group>
                  <fpage>205</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.16</book-part-id>
                  <title-group>
                     <title>SOURCES AND FURTHER READING</title>
                  </title-group>
                  <fpage>207</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvz938zn.17</book-part-id>
                  <title-group>
                     <title>INDEX</title>
                  </title-group>
                  <fpage>211</fpage>
               </book-part-meta>
            </book-part>
         </body>
      </book-part>
   </body>
</book>
