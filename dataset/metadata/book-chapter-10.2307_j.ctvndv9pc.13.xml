

<book xmlns:oasis="http://docs.oasis-open.org/ns/oasis-exchange/table"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:mml="http://www.w3.org/1998/Math/MathML"
      dtd-version="0.2"
      xml:lang="eng">
   <collection-meta>
      <collection-id collection-id-type="jstor">j.ctt1q1xqkp</collection-id>
   </collection-meta>
   <book-meta>
      <book-id book-id-type="jstor">j.ctvndv9pc</book-id>
      <subj-group>
         <subject content-type="call-number">QA268 .B76 2019</subject>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Coding theory</subject>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Rhetoric</subject>
         <subj-group>
            <subject content-type="lcsh">Data processing</subject>
         </subj-group>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Software engineering</subject>
         <subj-group>
            <subject content-type="lcsh">Psychological aspects</subject>
         </subj-group>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Computer algorithms</subject>
         <subj-group>
            <subject content-type="lcsh">Psychological aspects</subject>
         </subj-group>
      </subj-group>
      <subj-group>
         <subject content-type="lcsh">Online social networks</subject>
      </subj-group>
      <subj-group subj-group-type="discipline">
         <subject>Technology</subject>
         <subject>Computer Science</subject>
      </subj-group>
      <book-title-group>
         <book-title>Rhetorical Code Studies</book-title>
         <subtitle>Discovering Arguments in and around Code</subtitle>
      </book-title-group>
      <contrib-group>
         <contrib contrib-type="author" id="contrib1">
            <name name-style="western">
               <surname>Brock</surname>
               <given-names>Kevin</given-names>
            </name>
         </contrib>
      </contrib-group>
      <pub-date>
         <day>18</day>
         <month>03</month>
         <year>2019</year>
      </pub-date>
      <isbn content-type="ppub">9780472131273</isbn>
      <isbn content-type="epub">9780472901043</isbn>
      <publisher>
         <publisher-name>University of Michigan Press</publisher-name>
         <publisher-loc>ANN ARBOR</publisher-loc>
      </publisher>
      <permissions>
         <copyright-year>2019</copyright-year>
         <copyright-holder>Kevin Brock</copyright-holder>
      </permissions>
      <self-uri xlink:href="https://www.jstor.org/stable/j.ctvndv9pc"/>
      <abstract abstract-type="short">
         <p> Winner of the 2017 Sweetland Digital Rhetoric Collaborative Book Prize Software developers work rhetorically to make meaning through the code they write. In some ways, writing code is like any other form of communication; in others, it proves to be new, exciting, and unique. In<italic>Rhetorical Code Studies</italic>, Kevin Brock explores how software code serves as meaningful communication through which software developers construct arguments that are made up of logical procedures and express both implicit and explicit claims as to how a given program operates.    Building on current scholarly work in digital rhetoric, software studies, and technical communication, Brock connects and continues ongoing conversations among rhetoricians, technical communicators, software studies scholars, and programming practitioners to demonstrate how software code and its surrounding discourse are highly rhetorical forms of communication. He considers examples ranging from large, well-known projects like Mozilla Firefox to small-scale programs like the "FizzBuzz" test common in many programming job interviews. Undertaking specific examinations of code texts as well as the contexts surrounding their composition, Brock illuminates the variety and depth of rhetorical activity taking place in and around code, from individual differences in style to changes in large-scale organizational and community norms.    <italic>Rhetorical Code Studies</italic> holds significant implications for digital communication, multimodal composition, and the cultural analysis of software and its creation. It will interest academics and students of writing, rhetoric, and software engineering as well as technical communicators and developers of all types of software.</p>
      </abstract>
      <funding-group>
         <award-group>
            <funding-source>Sweetland Digital Rhetoric Collaborative</funding-source>
         </award-group>
      </funding-group>
      <custom-meta-group>
         <custom-meta>
            <meta-name>
                    lang
                </meta-name>
            <meta-value>eng</meta-value>
         </custom-meta>
      </custom-meta-group>
   </book-meta>
   <body>
      <book-part book-part-type="book-toc-page-order" indexed="yes">
         <body>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.1</book-part-id>
                  <title-group>
                     <title>Front Matter</title>
                  </title-group>
                  <fpage>i</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.2</book-part-id>
                  <title-group>
                     <title>Acknowledgments</title>
                  </title-group>
                  <fpage>vii</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.3</book-part-id>
                  <title-group>
                     <title>Table of Contents</title>
                  </title-group>
                  <fpage>xi</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.4</book-part-id>
                  <title-group>
                     <title>List of Tables</title>
                  </title-group>
                  <fpage>xiii</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.5</book-part-id>
                  <title-group>
                     <title>List of Practice Scripts</title>
                  </title-group>
                  <fpage>xv</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.6</book-part-id>
                  <title-group>
                     <title>List of Figures</title>
                  </title-group>
                  <fpage>xvii</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.7</book-part-id>
                  <title-group>
                     <title>Introduction</title>
                  </title-group>
                  <fpage>1</fpage>
                  <abstract>
                     <p>For several days in May 2017, approximately 200,000 computer systems were infected by “WannaCry,” a ransomware attack that exploited a set of security vulnerabilities in the Microsoft Windows operating system. Once WannaCry gained access to a new system, it would check if a given website domain was registered. If the domain was not registered, WannaCry would encrypt data on the system’s drive(s) and then propagate itself randomly to other systems via the Internet and any local network connections. Then, WannaCry displayed a message to users of the system that their data was being held hostage and that a ransom could</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.8</book-part-id>
                  <title-group>
                     <label>CHAPTER 1</label>
                     <title>Toward the Rhetorical Study of Code</title>
                  </title-group>
                  <fpage>9</fpage>
                  <abstract>
                     <p>In April 2014, it was revealed that a security bug in OpenSSL, a software library for ensuring secure communication in and across computer networks, had existed for the previous two years. The bug operated by opening an exploit into the “heartbeat request message,” a means of testing the security of connections opened with OpenSSL. While these messages were <italic>supposed</italic> to send a specific kind of data (a 16-bit integer) for this test and then have the same message sent back to confirm connection, the bug allowed for the data contents of a computer’s entire allocated memory buffer to be sent</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.9</book-part-id>
                  <title-group>
                     <label>CHAPTER 2</label>
                     <title>Rhetoric and the Algorithm</title>
                  </title-group>
                  <fpage>33</fpage>
                  <abstract>
                     <p>The algorithm is perhaps the concept most central to rhetorical code studies, and it is necessary to examine how algorithmic procedures are related to humanistic scholarship in general and to rhetoric in particular. This relationship can be demonstrated by tracing a path from the origins of the algorithm through its adoption from mathematics by computer science and engineering to its role in the critical work of humanities research. Following this brief history of the algorithm and its connection to humanistic work is an interrogation of how the algorithm plays an integral role in rhetorical activity. Such activity can be understood</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.10</book-part-id>
                  <title-group>
                     <label>CHAPTER 3</label>
                     <title>“I Have No Damn Idea Why This Is So Convoluted”:</title>
                     <subtitle>Analyzing Arguments Surrounding Code</subtitle>
                  </title-group>
                  <fpage>71</fpage>
                  <abstract>
                     <p>Despite the long-standing relationship that exists between algorithmic procedure and humanistic activity, it has only been relatively recently that rhetoricians have investigated how algorithms function rhetorically (and how they are <italic>understood</italic> to do so) for computational and communicative purposes. This set of qualities is key: while algorithmic procedures perform meaningfully, those who compose and execute such procedures may not always recognize how those procedures serve them in a rhetorical sense. Thus if we are ultimately to examine how code is a means of constructing meaning via algorithms, it is first necessary to investigate how those involved in the development of</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.11</book-part-id>
                  <title-group>
                     <label>CHAPTER 4</label>
                     <title>Developing Arguments in Code:</title>
                     <subtitle>The Case of Mozilla Firefox</subtitle>
                  </title-group>
                  <fpage>115</fpage>
                  <abstract>
                     <p>While the overwhelming majority of critical inquiry into the rhetoric of digital media and technologies has focused on key forms of conventional discourse—those that often surround and describe code practices and texts that make up digital media and technologies—there is also a territory ripe for further investigation: those very code practices and texts. That is, if we are to understand the expressive products of code as rhetorical, we may well find it useful to know how code rhetorically facilitates those expressions. So, in order to clarify a rhetorical understanding of code as valuable object of and site for</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.12</book-part-id>
                  <title-group>
                     <label>CHAPTER 5</label>
                     <title>Composing in Code:</title>
                     <subtitle>A Brief Engagement with JavaScript</subtitle>
                  </title-group>
                  <fpage>151</fpage>
                  <abstract>
                     <p>While we can engage code from “without” in the form of a conventional scholarly investigation, there remains a missing component integral to understanding how arguments are (and can be) made in code: the activity of <italic>actually composing</italic> code texts. This is not to suggest that one must be an expert coder or programmer to develop arguments in code, but relevant knowledge—of procedure, specific language syntax, and so on—certainly facilitates the development of more complex or nuanced communication. Put another way, echoing Haefner’s (1999) call for composition instructors to discuss code contexts, functional possibilities, and the relationship between Structured</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.13</book-part-id>
                  <title-group>
                     <label>CHAPTER 6</label>
                     <title>Conclusions</title>
                  </title-group>
                  <fpage>181</fpage>
                  <abstract>
                     <p>I undertook this project to pursue a critical examination of the relationship between the rhetorical possibilities of algorithmic computation and the computational qualities of rhetoric, taking advantage of opportunities created by current popular interest in code. Scholars interested in the means by which digital technologies enable and constrain particular ranges of action could similarly offer novel insights into our understanding of rhetoric by considering how the relationship between rhetoric and computational logic can offer us insight into the workings of both. It is not enough merely to identify rhetoric “as” computational, or computation “as” a form of rhetorical communication; the</p>
                  </abstract>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.14</book-part-id>
                  <title-group>
                     <title>Bibliography</title>
                  </title-group>
                  <fpage>193</fpage>
               </book-part-meta>
            </book-part>
            <book-part>
               <book-part-meta>
                  <book-part-id book-part-id-type="jstor">j.ctvndv9pc.15</book-part-id>
                  <title-group>
                     <title>Index</title>
                  </title-group>
                  <fpage>207</fpage>
               </book-part-meta>
            </book-part>
         </body>
      </book-part>
   </body>
</book>
